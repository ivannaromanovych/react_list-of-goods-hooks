{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","Default","sortField","setSortField","isReverse","setIsReverse","sortedGoods","goods","preparedGoods","Name","sort","a","b","localeCompare","Length","length","reverse","getPreparedGoods","isListChanged","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,sBAAAA,E,gBAAAA,E,YAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACMC,EA7BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAuB,YAAOD,GAEpC,GAAIL,EACF,OAAQA,GACN,KAAKL,EAAOY,KACVD,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC7C,MACF,KAAKf,EAAOiB,OACVN,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAUhD,OAJIX,GACFI,EAAcQ,UAGTR,EAMaS,CAClBnB,EACAI,EACAE,GAOIc,IAAkBhB,GAAaE,EAErC,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAcL,EAAOY,OAErCa,QAAS,kBAAMnB,EAAaN,EAAOY,OAPrC,iCAYA,wBACEW,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAcL,EAAOiB,SAErCQ,QAAS,kBAAMnB,EAAaN,EAAOiB,SAPrC,4BAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAcD,IAP/B,qBAWCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAjDU,WAClBnB,EAAaN,EAAOI,SACpBI,GAAa,IA4CP,sBAUJ,6BACGC,EAAYiB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCjHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.23e88d23.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'alphabetically',\n  Length = 'length',\n  Default = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortBy,\n  isReverse: boolean,\n) {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortBy.Name:\n        preparedGoods.sort((a, b) => a.localeCompare(b));\n        break;\n      case SortBy.Length:\n        preparedGoods.sort((a, b) => a.length - b.length);\n        break;\n      default: break;\n    }\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortBy.Default);\n  const [isReverse, setIsReverse] = useState(false);\n  const sortedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReverse,\n  );\n  const handleClick = () => {\n    setSortField(SortBy.Default);\n    setIsReverse(false);\n  };\n\n  const isListChanged = !!sortField || isReverse;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.Name },\n          )}\n          onClick={() => setSortField(SortBy.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.Length },\n          )}\n          onClick={() => setSortField(SortBy.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReverse },\n          )}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n        {isListChanged && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClick}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}